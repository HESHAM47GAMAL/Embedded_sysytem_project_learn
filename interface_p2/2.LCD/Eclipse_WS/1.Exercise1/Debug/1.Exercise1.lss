
1.Exercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000022f4  00002388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800086  00800086  000023ae  2**0
                  ALLOC
  3 .stab         00001c08  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001236  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000532e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000549e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000916d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000993b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 10 	call	0x20e2	; 0x20e2 <main>
      8a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	57 c0       	rjmp	.+174    	; 0xc02 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	c9 01       	movw	r24, r18
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	fc 01       	movw	r30, r24
     b66:	ed 57       	subi	r30, 0x7D	; 125
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	80 81       	ld	r24, Z
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	e9 f4       	brne	.+58     	; 0xbaa <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	c9 01       	movw	r24, r18
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	fc 01       	movw	r30, r24
     b82:	ee 57       	subi	r30, 0x7E	; 126
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	40 81       	ld	r20, Z
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	c9 01       	movw	r24, r18
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	fc 01       	movw	r30, r24
     b9a:	ec 57       	subi	r30, 0x7C	; 124
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	90 81       	ld	r25, Z
     ba0:	84 2f       	mov	r24, r20
     ba2:	69 2f       	mov	r22, r25
     ba4:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_SetPortDirection>
     ba8:	29 c0       	rjmp	.+82     	; 0xbfc <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	c9 01       	movw	r24, r18
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	ee 57       	subi	r30, 0x7E	; 126
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	50 81       	ld	r21, Z
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	c9 01       	movw	r24, r18
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	fc 01       	movw	r30, r24
     bd4:	ed 57       	subi	r30, 0x7D	; 125
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	40 81       	ld	r20, Z
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	c9 01       	movw	r24, r18
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	fc 01       	movw	r30, r24
     bec:	ec 57       	subi	r30, 0x7C	; 124
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	90 81       	ld	r25, Z
     bf2:	85 2f       	mov	r24, r21
     bf4:	64 2f       	mov	r22, r20
     bf6:	49 2f       	mov	r20, r25
     bf8:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <GPIO_init+0xc4>
     c08:	a5 cf       	rjmp	.-182    	; 0xb54 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <GPIO_SetPinDirection+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <GPIO_SetPinDirection+0x8>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	6a 83       	std	Y+2, r22	; 0x02
     c24:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <GPIO_SetPinDirection+0x1c>
     c2c:	d8 c1       	rjmp	.+944    	; 0xfde <GPIO_SetPinDirection+0x3cc>
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	08 f0       	brcs	.+2      	; 0xc36 <GPIO_SetPinDirection+0x24>
     c34:	d4 c1       	rjmp	.+936    	; 0xfde <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	3d 83       	std	Y+5, r19	; 0x05
     c3e:	2c 83       	std	Y+4, r18	; 0x04
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <GPIO_SetPinDirection+0x3a>
     c4a:	84 c0       	rjmp	.+264    	; 0xd54 <GPIO_SetPinDirection+0x142>
     c4c:	2c 81       	ldd	r18, Y+4	; 0x04
     c4e:	3d 81       	ldd	r19, Y+5	; 0x05
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	2c f4       	brge	.+10     	; 0xc60 <GPIO_SetPinDirection+0x4e>
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	9d 81       	ldd	r25, Y+5	; 0x05
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	71 f0       	breq	.+28     	; 0xc7a <GPIO_SetPinDirection+0x68>
     c5e:	bf c1       	rjmp	.+894    	; 0xfde <GPIO_SetPinDirection+0x3cc>
     c60:	2c 81       	ldd	r18, Y+4	; 0x04
     c62:	3d 81       	ldd	r19, Y+5	; 0x05
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <GPIO_SetPinDirection+0x5a>
     c6a:	e1 c0       	rjmp	.+450    	; 0xe2e <GPIO_SetPinDirection+0x21c>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	91 05       	cpc	r25, r1
     c74:	09 f4       	brne	.+2      	; 0xc78 <GPIO_SetPinDirection+0x66>
     c76:	48 c1       	rjmp	.+656    	; 0xf08 <GPIO_SetPinDirection+0x2f6>
     c78:	b2 c1       	rjmp	.+868    	; 0xfde <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	88 23       	and	r24, r24
     c7e:	41 f5       	brne	.+80     	; 0xcd0 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
     c80:	aa e3       	ldi	r26, 0x3A	; 58
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ea e3       	ldi	r30, 0x3A	; 58
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <GPIO_SetPinDirection+0x8a>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	2a 95       	dec	r18
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <GPIO_SetPinDirection+0x86>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
     ca6:	ab e3       	ldi	r26, 0x3B	; 59
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	eb e3       	ldi	r30, 0x3B	; 59
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_SetPinDirection+0xb2>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_SetPinDirection+0xae>
     cc8:	80 95       	com	r24
     cca:	84 23       	and	r24, r20
     ccc:	8c 93       	st	X, r24
     cce:	87 c1       	rjmp	.+782    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	39 f5       	brne	.+78     	; 0xd24 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
     cd6:	aa e3       	ldi	r26, 0x3A	; 58
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ea e3       	ldi	r30, 0x3A	; 58
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_SetPinDirection+0xe0>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	2a 95       	dec	r18
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_SetPinDirection+0xdc>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
     cfc:	ab e3       	ldi	r26, 0x3B	; 59
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	eb e3       	ldi	r30, 0x3B	; 59
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_SetPinDirection+0x108>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_SetPinDirection+0x104>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	5d c1       	rjmp	.+698    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	09 f0       	breq	.+2      	; 0xd2c <GPIO_SetPinDirection+0x11a>
     d2a:	59 c1       	rjmp	.+690    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
     d2c:	aa e3       	ldi	r26, 0x3A	; 58
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e3       	ldi	r30, 0x3A	; 58
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <GPIO_SetPinDirection+0x138>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <GPIO_SetPinDirection+0x134>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	45 c1       	rjmp	.+650    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	41 f5       	brne	.+80     	; 0xdaa <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <GPIO_SetPinDirection+0x164>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	2a 95       	dec	r18
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <GPIO_SetPinDirection+0x160>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
     d80:	a8 e3       	ldi	r26, 0x38	; 56
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 e3       	ldi	r30, 0x38	; 56
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <GPIO_SetPinDirection+0x18c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <GPIO_SetPinDirection+0x188>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	1a c1       	rjmp	.+564    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	39 f5       	brne	.+78     	; 0xdfe <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
     db0:	a7 e3       	ldi	r26, 0x37	; 55
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_SetPinDirection+0x1ba>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	2a 95       	dec	r18
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_SetPinDirection+0x1b6>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
     dd6:	a8 e3       	ldi	r26, 0x38	; 56
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_SetPinDirection+0x1e2>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_SetPinDirection+0x1de>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	f0 c0       	rjmp	.+480    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	09 f0       	breq	.+2      	; 0xe06 <GPIO_SetPinDirection+0x1f4>
     e04:	ec c0       	rjmp	.+472    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_SetPinDirection+0x212>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_SetPinDirection+0x20e>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	d8 c0       	rjmp	.+432    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	41 f5       	brne	.+80     	; 0xe84 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
     e34:	a4 e3       	ldi	r26, 0x34	; 52
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e4 e3       	ldi	r30, 0x34	; 52
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_SetPinDirection+0x23e>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	2a 95       	dec	r18
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_SetPinDirection+0x23a>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_SetPinDirection+0x266>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_SetPinDirection+0x262>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	ad c0       	rjmp	.+346    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	39 f5       	brne	.+78     	; 0xed8 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <GPIO_SetPinDirection+0x294>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	2a 95       	dec	r18
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <GPIO_SetPinDirection+0x290>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
     eb0:	a5 e3       	ldi	r26, 0x35	; 53
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <GPIO_SetPinDirection+0x2bc>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <GPIO_SetPinDirection+0x2b8>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	83 c0       	rjmp	.+262    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	09 f0       	breq	.+2      	; 0xee0 <GPIO_SetPinDirection+0x2ce>
     ede:	7f c0       	rjmp	.+254    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
     ee0:	a4 e3       	ldi	r26, 0x34	; 52
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_SetPinDirection+0x2ec>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_SetPinDirection+0x2e8>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	6b c0       	rjmp	.+214    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	41 f5       	brne	.+80     	; 0xf5e <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_SetPinDirection+0x318>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	2a 95       	dec	r18
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_SetPinDirection+0x314>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
     f34:	a2 e3       	ldi	r26, 0x32	; 50
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e2 e3       	ldi	r30, 0x32	; 50
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <GPIO_SetPinDirection+0x340>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <GPIO_SetPinDirection+0x33c>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	40 c0       	rjmp	.+128    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	39 f5       	brne	.+78     	; 0xfb2 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
     f64:	a1 e3       	ldi	r26, 0x31	; 49
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_SetPinDirection+0x36e>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_SetPinDirection+0x36a>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_SetPinDirection+0x396>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_SetPinDirection+0x392>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	99 f4       	brne	.+38     	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_SetPinDirection+0x3c4>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_SetPinDirection+0x3c0>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <GPIO_ReadPin+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <GPIO_ReadPin+0x8>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	8a 83       	std	Y+2, r24	; 0x02
     ffe:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1000:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_ReadPin+0x1c>
    1008:	84 c0       	rjmp	.+264    	; 0x1112 <GPIO_ReadPin+0x124>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_ReadPin+0x24>
    1010:	80 c0       	rjmp	.+256    	; 0x1112 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	41 30       	cpi	r20, 0x01	; 1
    1022:	51 05       	cpc	r21, r1
    1024:	79 f1       	breq	.+94     	; 0x1084 <GPIO_ReadPin+0x96>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	91 05       	cpc	r25, r1
    102e:	34 f4       	brge	.+12     	; 0x103c <GPIO_ReadPin+0x4e>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	69 f0       	breq	.+26     	; 0x1054 <GPIO_ReadPin+0x66>
    103a:	6b c0       	rjmp	.+214    	; 0x1112 <GPIO_ReadPin+0x124>
    103c:	4c 81       	ldd	r20, Y+4	; 0x04
    103e:	5d 81       	ldd	r21, Y+5	; 0x05
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	51 05       	cpc	r21, r1
    1044:	b9 f1       	breq	.+110    	; 0x10b4 <GPIO_ReadPin+0xc6>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <GPIO_ReadPin+0x64>
    1050:	49 c0       	rjmp	.+146    	; 0x10e4 <GPIO_ReadPin+0xf6>
    1052:	5f c0       	rjmp	.+190    	; 0x1112 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    1054:	e9 e3       	ldi	r30, 0x39	; 57
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_ReadPin+0x7e>
    1068:	55 95       	asr	r21
    106a:	47 95       	ror	r20
    106c:	8a 95       	dec	r24
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_ReadPin+0x7a>
    1070:	ca 01       	movw	r24, r20
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	88 23       	and	r24, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	49 c0       	rjmp	.+146    	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	47 c0       	rjmp	.+142    	; 0x1112 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    1084:	e6 e3       	ldi	r30, 0x36	; 54
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_ReadPin+0xae>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_ReadPin+0xaa>
    10a0:	ca 01       	movw	r24, r20
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	88 23       	and	r24, r24
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	31 c0       	rjmp	.+98     	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    10b0:	19 82       	std	Y+1, r1	; 0x01
    10b2:	2f c0       	rjmp	.+94     	; 0x1112 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    10b4:	e3 e3       	ldi	r30, 0x33	; 51
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_ReadPin+0xde>
    10c8:	55 95       	asr	r21
    10ca:	47 95       	ror	r20
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_ReadPin+0xda>
    10d0:	ca 01       	movw	r24, r20
    10d2:	81 70       	andi	r24, 0x01	; 1
    10d4:	90 70       	andi	r25, 0x00	; 0
    10d6:	88 23       	and	r24, r24
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	19 c0       	rjmp	.+50     	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	17 c0       	rjmp	.+46     	; 0x1112 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    10e4:	e0 e3       	ldi	r30, 0x30	; 48
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_ReadPin+0x10e>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_ReadPin+0x10a>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	90 70       	andi	r25, 0x00	; 0
    1106:	88 23       	and	r24, r24
    1108:	19 f0       	breq	.+6      	; 0x1110 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1110:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <GPIO_WritePin+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <GPIO_WritePin+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	6a 83       	std	Y+2, r22	; 0x02
    1136:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <GPIO_WritePin+0x1c>
    113e:	e4 c0       	rjmp	.+456    	; 0x1308 <GPIO_WritePin+0x1e4>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <GPIO_WritePin+0x24>
    1146:	e0 c0       	rjmp	.+448    	; 0x1308 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <GPIO_WritePin+0x3a>
    115c:	47 c0       	rjmp	.+142    	; 0x11ec <GPIO_WritePin+0xc8>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	2c f4       	brge	.+10     	; 0x1172 <GPIO_WritePin+0x4e>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	71 f0       	breq	.+28     	; 0x118c <GPIO_WritePin+0x68>
    1170:	cb c0       	rjmp	.+406    	; 0x1308 <GPIO_WritePin+0x1e4>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_WritePin+0x5a>
    117c:	67 c0       	rjmp	.+206    	; 0x124c <GPIO_WritePin+0x128>
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <GPIO_WritePin+0x66>
    1188:	91 c0       	rjmp	.+290    	; 0x12ac <GPIO_WritePin+0x188>
    118a:	be c0       	rjmp	.+380    	; 0x1308 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1192:	ab e3       	ldi	r26, 0x3B	; 59
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_WritePin+0x8c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_WritePin+0x88>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	a7 c0       	rjmp	.+334    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <GPIO_WritePin+0x9e>
    11c0:	a3 c0       	rjmp	.+326    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    11c2:	ab e3       	ldi	r26, 0x3B	; 59
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e3       	ldi	r30, 0x3B	; 59
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_WritePin+0xbc>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_WritePin+0xb8>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	8e c0       	rjmp	.+284    	; 0x1308 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	a1 f4       	brne	.+40     	; 0x121a <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_WritePin+0xec>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_WritePin+0xe8>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	77 c0       	rjmp	.+238    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 23       	and	r24, r24
    121e:	09 f0       	breq	.+2      	; 0x1222 <GPIO_WritePin+0xfe>
    1220:	73 c0       	rjmp	.+230    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_WritePin+0x11c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_WritePin+0x118>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	5e c0       	rjmp	.+188    	; 0x1308 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_WritePin+0x14c>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_WritePin+0x148>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	47 c0       	rjmp	.+142    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 23       	and	r24, r24
    127e:	09 f0       	breq	.+2      	; 0x1282 <GPIO_WritePin+0x15e>
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_WritePin+0x17c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_WritePin+0x178>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	a1 f4       	brne	.+40     	; 0x12da <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    12b2:	a2 e3       	ldi	r26, 0x32	; 50
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_WritePin+0x1ac>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_WritePin+0x1a8>
    12d4:	84 2b       	or	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	17 c0       	rjmp	.+46     	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 23       	and	r24, r24
    12de:	a1 f4       	brne	.+40     	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_WritePin+0x1da>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_WritePin+0x1d6>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
                break;

        }
    }
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <GPIO_SetPortDirection>:


void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <GPIO_SetPortDirection+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_SetPortDirection+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	08 f0       	brcs	.+2      	; 0x1330 <GPIO_SetPortDirection+0x18>
    132e:	96 c0       	rjmp	.+300    	; 0x145c <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3c 83       	std	Y+4, r19	; 0x04
    1338:	2b 83       	std	Y+3, r18	; 0x03
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	a9 f1       	breq	.+106    	; 0x13ae <GPIO_SetPortDirection+0x96>
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	3c 81       	ldd	r19, Y+4	; 0x04
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	2c f4       	brge	.+10     	; 0x1358 <GPIO_SetPortDirection+0x40>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	71 f0       	breq	.+28     	; 0x1372 <GPIO_SetPortDirection+0x5a>
    1356:	82 c0       	rjmp	.+260    	; 0x145c <GPIO_SetPortDirection+0x144>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <GPIO_SetPortDirection+0x4c>
    1362:	43 c0       	rjmp	.+134    	; 0x13ea <GPIO_SetPortDirection+0xd2>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <GPIO_SetPortDirection+0x58>
    136e:	5a c0       	rjmp	.+180    	; 0x1424 <GPIO_SetPortDirection+0x10c>
    1370:	75 c0       	rjmp	.+234    	; 0x145c <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 23       	and	r24, r24
    1376:	39 f4       	brne	.+14     	; 0x1386 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1378:	ea e3       	ldi	r30, 0x3A	; 58
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
    1384:	6b c0       	rjmp	.+214    	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	41 f4       	brne	.+16     	; 0x139c <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1392:	eb e3       	ldi	r30, 0x3B	; 59
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	80 83       	st	Z, r24
    139a:	60 c0       	rjmp	.+192    	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <GPIO_SetPortDirection+0x8c>
    13a2:	5c c0       	rjmp	.+184    	; 0x145c <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	80 83       	st	Z, r24
    13ac:	57 c0       	rjmp	.+174    	; 0x145c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 23       	and	r24, r24
    13b2:	39 f4       	brne	.+14     	; 0x13c2 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    13b4:	e7 e3       	ldi	r30, 0x37	; 55
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	10 82       	st	Z, r1
    13c0:	4d c0       	rjmp	.+154    	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    13c8:	e7 e3       	ldi	r30, 0x37	; 55
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    13ce:	e8 e3       	ldi	r30, 0x38	; 56
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	80 83       	st	Z, r24
    13d6:	42 c0       	rjmp	.+132    	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <GPIO_SetPortDirection+0xc8>
    13de:	3e c0       	rjmp	.+124    	; 0x145c <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	80 83       	st	Z, r24
    13e8:	39 c0       	rjmp	.+114    	; 0x145c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 23       	and	r24, r24
    13ee:	39 f4       	brne	.+14     	; 0x13fe <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    13f0:	e4 e3       	ldi	r30, 0x34	; 52
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1
    13fc:	2f c0       	rjmp	.+94     	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	41 f4       	brne	.+16     	; 0x1414 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1404:	e4 e3       	ldi	r30, 0x34	; 52
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	80 83       	st	Z, r24
    1412:	24 c0       	rjmp	.+72     	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	8f 3f       	cpi	r24, 0xFF	; 255
    1418:	09 f5       	brne	.+66     	; 0x145c <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    141a:	e4 e3       	ldi	r30, 0x34	; 52
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 83       	st	Z, r24
    1422:	1c c0       	rjmp	.+56     	; 0x145c <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 23       	and	r24, r24
    1428:	39 f4       	brne	.+14     	; 0x1438 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    142a:	e1 e3       	ldi	r30, 0x31	; 49
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1430:	e2 e3       	ldi	r30, 0x32	; 50
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	10 82       	st	Z, r1
    1436:	12 c0       	rjmp	.+36     	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	41 f4       	brne	.+16     	; 0x144e <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    143e:	e1 e3       	ldi	r30, 0x31	; 49
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	80 83       	st	Z, r24
    144c:	07 c0       	rjmp	.+14     	; 0x145c <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	8f 3f       	cpi	r24, 0xFF	; 255
    1452:	21 f4       	brne	.+8      	; 0x145c <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1454:	e1 e3       	ldi	r30, 0x31	; 49
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_ReadPort+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_ReadPort+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1478:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	90 f5       	brcc	.+100    	; 0x14e4 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3c 83       	std	Y+4, r19	; 0x04
    1488:	2b 83       	std	Y+3, r18	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	d1 f0       	breq	.+52     	; 0x14c8 <GPIO_ReadPort+0x5e>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <GPIO_ReadPort+0x3e>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 f0       	breq	.+24     	; 0x14be <GPIO_ReadPort+0x54>
    14a6:	1e c0       	rjmp	.+60     	; 0x14e4 <GPIO_ReadPort+0x7a>
    14a8:	2b 81       	ldd	r18, Y+3	; 0x03
    14aa:	3c 81       	ldd	r19, Y+4	; 0x04
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <GPIO_ReadPort+0x68>
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <GPIO_ReadPort+0x72>
    14bc:	13 c0       	rjmp	.+38     	; 0x14e4 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    14be:	e9 e3       	ldi	r30, 0x39	; 57
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	0e c0       	rjmp	.+28     	; 0x14e4 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    14c8:	e6 e3       	ldi	r30, 0x36	; 54
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    14d2:	e3 e3       	ldi	r30, 0x33	; 51
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_WritePort+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_WritePort+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	90 f5       	brcc	.+100    	; 0x156e <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <GPIO_WritePort+0x5e>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_WritePort+0x3e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <GPIO_WritePort+0x54>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <GPIO_WritePort+0x7a>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <GPIO_WritePort+0x68>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <GPIO_WritePort+0x72>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	0e c0       	rjmp	.+28     	; 0x156e <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
    155a:	09 c0       	rjmp	.+18     	; 0x156e <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
                break ;
        }
    }
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	42 e0       	ldi	r20, 0x02	; 2
    158a:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    /*  congfigure R/W LCD pin   */
    GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	42 e0       	ldi	r20, 0x02	; 2
    1594:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	42 e0       	ldi	r20, 0x02	; 2
    159e:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>

    /*  Configure pins of Data with LCD     */
    #if(LCD_BITS_MODE == LCD_8_BIT_MODE)
        GPIO_SetPortDirection(LCD_DATA_PORT,OUTPUT_PORT);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	6f ef       	ldi	r22, 0xFF	; 255
    15a6:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_SetPortDirection>
        /*  Send command that tell I want to use 8 data pins*/
        LCD_SendCommand(LCD_2_LINE_8_BIT_5x8_DOT) ; 
    15aa:	88 e3       	ldi	r24, 0x38	; 56
    15ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    #elif(CURSOR_STATE == CURSOR_ON_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_ON);
    15b0:	8f e0       	ldi	r24, 0x0F	; 15
    15b2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	e9 97       	sbiw	r28, 0x39	; 57
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	89 af       	std	Y+57, r24	; 0x39
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    /*  I need to write data to lCD*/
    GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e8       	ldi	r26, 0x80	; 128
    15f2:	bf e3       	ldi	r27, 0x3F	; 63
    15f4:	8d ab       	std	Y+53, r24	; 0x35
    15f6:	9e ab       	std	Y+54, r25	; 0x36
    15f8:	af ab       	std	Y+55, r26	; 0x37
    15fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fc:	6d a9       	ldd	r22, Y+53	; 0x35
    15fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1600:	8f a9       	ldd	r24, Y+55	; 0x37
    1602:	98 ad       	ldd	r25, Y+56	; 0x38
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	4a e7       	ldi	r20, 0x7A	; 122
    160a:	53 e4       	ldi	r21, 0x43	; 67
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	89 ab       	std	Y+49, r24	; 0x31
    1616:	9a ab       	std	Y+50, r25	; 0x32
    1618:	ab ab       	std	Y+51, r26	; 0x33
    161a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    161c:	69 a9       	ldd	r22, Y+49	; 0x31
    161e:	7a a9       	ldd	r23, Y+50	; 0x32
    1620:	8b a9       	ldd	r24, Y+51	; 0x33
    1622:	9c a9       	ldd	r25, Y+52	; 0x34
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1630:	88 23       	and	r24, r24
    1632:	2c f4       	brge	.+10     	; 0x163e <LCD_SendCommand+0x7c>
		__ticks = 1;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	98 ab       	std	Y+48, r25	; 0x30
    163a:	8f a7       	std	Y+47, r24	; 0x2f
    163c:	3f c0       	rjmp	.+126    	; 0x16bc <LCD_SendCommand+0xfa>
	else if (__tmp > 65535)
    163e:	69 a9       	ldd	r22, Y+49	; 0x31
    1640:	7a a9       	ldd	r23, Y+50	; 0x32
    1642:	8b a9       	ldd	r24, Y+51	; 0x33
    1644:	9c a9       	ldd	r25, Y+52	; 0x34
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	57 e4       	ldi	r21, 0x47	; 71
    164e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	4c f5       	brge	.+82     	; 0x16a8 <LCD_SendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1656:	6d a9       	ldd	r22, Y+53	; 0x35
    1658:	7e a9       	ldd	r23, Y+54	; 0x36
    165a:	8f a9       	ldd	r24, Y+55	; 0x37
    165c:	98 ad       	ldd	r25, Y+56	; 0x38
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	98 ab       	std	Y+48, r25	; 0x30
    167c:	8f a7       	std	Y+47, r24	; 0x2f
    167e:	0f c0       	rjmp	.+30     	; 0x169e <LCD_SendCommand+0xdc>
    1680:	89 e1       	ldi	r24, 0x19	; 25
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9e a7       	std	Y+46, r25	; 0x2e
    1686:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1688:	8d a5       	ldd	r24, Y+45	; 0x2d
    168a:	9e a5       	ldd	r25, Y+46	; 0x2e
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_SendCommand+0xca>
    1690:	9e a7       	std	Y+46, r25	; 0x2e
    1692:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1694:	8f a5       	ldd	r24, Y+47	; 0x2f
    1696:	98 a9       	ldd	r25, Y+48	; 0x30
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	98 ab       	std	Y+48, r25	; 0x30
    169c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f7       	brne	.-38     	; 0x1680 <LCD_SendCommand+0xbe>
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <LCD_SendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	98 ab       	std	Y+48, r25	; 0x30
    16ba:	8f a7       	std	Y+47, r24	; 0x2f
    16bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16be:	98 a9       	ldd	r25, Y+48	; 0x30
    16c0:	9c a7       	std	Y+44, r25	; 0x2c
    16c2:	8b a7       	std	Y+43, r24	; 0x2b
    16c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCD_SendCommand+0x106>
    16cc:	9c a7       	std	Y+44, r25	; 0x2c
    16ce:	8b a7       	std	Y+43, r24	; 0x2b

    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	66 e0       	ldi	r22, 0x06	; 6
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e8       	ldi	r26, 0x80	; 128
    16e0:	bf e3       	ldi	r27, 0x3F	; 63
    16e2:	8f a3       	std	Y+39, r24	; 0x27
    16e4:	98 a7       	std	Y+40, r25	; 0x28
    16e6:	a9 a7       	std	Y+41, r26	; 0x29
    16e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6f a1       	ldd	r22, Y+39	; 0x27
    16ec:	78 a5       	ldd	r23, Y+40	; 0x28
    16ee:	89 a5       	ldd	r24, Y+41	; 0x29
    16f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e7       	ldi	r20, 0x7A	; 122
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8b a3       	std	Y+35, r24	; 0x23
    1704:	9c a3       	std	Y+36, r25	; 0x24
    1706:	ad a3       	std	Y+37, r26	; 0x25
    1708:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    170a:	6b a1       	ldd	r22, Y+35	; 0x23
    170c:	7c a1       	ldd	r23, Y+36	; 0x24
    170e:	8d a1       	ldd	r24, Y+37	; 0x25
    1710:	9e a1       	ldd	r25, Y+38	; 0x26
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_SendCommand+0x16a>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9a a3       	std	Y+34, r25	; 0x22
    1728:	89 a3       	std	Y+33, r24	; 0x21
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <LCD_SendCommand+0x1e8>
	else if (__tmp > 65535)
    172c:	6b a1       	ldd	r22, Y+35	; 0x23
    172e:	7c a1       	ldd	r23, Y+36	; 0x24
    1730:	8d a1       	ldd	r24, Y+37	; 0x25
    1732:	9e a1       	ldd	r25, Y+38	; 0x26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <LCD_SendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6f a1       	ldd	r22, Y+39	; 0x27
    1746:	78 a5       	ldd	r23, Y+40	; 0x28
    1748:	89 a5       	ldd	r24, Y+41	; 0x29
    174a:	9a a5       	ldd	r25, Y+42	; 0x2a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9a a3       	std	Y+34, r25	; 0x22
    176a:	89 a3       	std	Y+33, r24	; 0x21
    176c:	0f c0       	rjmp	.+30     	; 0x178c <LCD_SendCommand+0x1ca>
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	98 a3       	std	Y+32, r25	; 0x20
    1774:	8f 8f       	std	Y+31, r24	; 0x1f
    1776:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1778:	98 a1       	ldd	r25, Y+32	; 0x20
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_SendCommand+0x1b8>
    177e:	98 a3       	std	Y+32, r25	; 0x20
    1780:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	89 a1       	ldd	r24, Y+33	; 0x21
    178e:	9a a1       	ldd	r25, Y+34	; 0x22
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <LCD_SendCommand+0x1ac>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <LCD_SendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6b a1       	ldd	r22, Y+35	; 0x23
    1798:	7c a1       	ldd	r23, Y+36	; 0x24
    179a:	8d a1       	ldd	r24, Y+37	; 0x25
    179c:	9e a1       	ldd	r25, Y+38	; 0x26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9a a3       	std	Y+34, r25	; 0x22
    17a8:	89 a3       	std	Y+33, r24	; 0x21
    17aa:	89 a1       	ldd	r24, Y+33	; 0x21
    17ac:	9a a1       	ldd	r25, Y+34	; 0x22
    17ae:	9e 8f       	std	Y+30, r25	; 0x1e
    17b0:	8d 8f       	std	Y+29, r24	; 0x1d
    17b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_SendCommand+0x1f4>
    17ba:	9e 8f       	std	Y+30, r25	; 0x1e
    17bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

    /*send data depend on wires 4 OR 8  */
    #if (LCD_BITS_MODE == LCD_8_BIT_MODE)
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	69 ad       	ldd	r22, Y+57	; 0x39
    17c2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_WritePort>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e8       	ldi	r26, 0x80	; 128
    17cc:	bf e3       	ldi	r27, 0x3F	; 63
    17ce:	89 8f       	std	Y+25, r24	; 0x19
    17d0:	9a 8f       	std	Y+26, r25	; 0x1a
    17d2:	ab 8f       	std	Y+27, r26	; 0x1b
    17d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	69 8d       	ldd	r22, Y+25	; 0x19
    17d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4a e7       	ldi	r20, 0x7A	; 122
    17e4:	53 e4       	ldi	r21, 0x43	; 67
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8d 8b       	std	Y+21, r24	; 0x15
    17f0:	9e 8b       	std	Y+22, r25	; 0x16
    17f2:	af 8b       	std	Y+23, r26	; 0x17
    17f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f6:	6d 89       	ldd	r22, Y+21	; 0x15
    17f8:	7e 89       	ldd	r23, Y+22	; 0x16
    17fa:	8f 89       	ldd	r24, Y+23	; 0x17
    17fc:	98 8d       	ldd	r25, Y+24	; 0x18
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <LCD_SendCommand+0x256>
		__ticks = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <LCD_SendCommand+0x2d4>
	else if (__tmp > 65535)
    1818:	6d 89       	ldd	r22, Y+21	; 0x15
    181a:	7e 89       	ldd	r23, Y+22	; 0x16
    181c:	8f 89       	ldd	r24, Y+23	; 0x17
    181e:	98 8d       	ldd	r25, Y+24	; 0x18
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	4c f5       	brge	.+82     	; 0x1882 <LCD_SendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	69 8d       	ldd	r22, Y+25	; 0x19
    1832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e2       	ldi	r20, 0x20	; 32
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9c 8b       	std	Y+20, r25	; 0x14
    1856:	8b 8b       	std	Y+19, r24	; 0x13
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <LCD_SendCommand+0x2b6>
    185a:	89 e1       	ldi	r24, 0x19	; 25
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9a 8b       	std	Y+18, r25	; 0x12
    1860:	89 8b       	std	Y+17, r24	; 0x11
    1862:	89 89       	ldd	r24, Y+17	; 0x11
    1864:	9a 89       	ldd	r25, Y+18	; 0x12
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_SendCommand+0x2a4>
    186a:	9a 8b       	std	Y+18, r25	; 0x12
    186c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	8b 89       	ldd	r24, Y+19	; 0x13
    1870:	9c 89       	ldd	r25, Y+20	; 0x14
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	8b 89       	ldd	r24, Y+19	; 0x13
    187a:	9c 89       	ldd	r25, Y+20	; 0x14
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f7       	brne	.-38     	; 0x185a <LCD_SendCommand+0x298>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <LCD_SendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9c 8b       	std	Y+20, r25	; 0x14
    1894:	8b 8b       	std	Y+19, r24	; 0x13
    1896:	8b 89       	ldd	r24, Y+19	; 0x13
    1898:	9c 89       	ldd	r25, Y+20	; 0x14
    189a:	98 8b       	std	Y+16, r25	; 0x10
    189c:	8f 87       	std	Y+15, r24	; 0x0f
    189e:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a0:	98 89       	ldd	r25, Y+16	; 0x10
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_SendCommand+0x2e0>
    18a6:	98 8b       	std	Y+16, r25	; 0x10
    18a8:	8f 87       	std	Y+15, r24	; 0x0f
        }
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	66 e0       	ldi	r22, 0x06	; 6
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e8       	ldi	r26, 0x80	; 128
    18ba:	bf e3       	ldi	r27, 0x3F	; 63
    18bc:	8b 87       	std	Y+11, r24	; 0x0b
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	ad 87       	std	Y+13, r26	; 0x0d
    18c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	53 e4       	ldi	r21, 0x43	; 67
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8f 83       	std	Y+7, r24	; 0x07
    18de:	98 87       	std	Y+8, r25	; 0x08
    18e0:	a9 87       	std	Y+9, r26	; 0x09
    18e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <LCD_SendCommand+0x344>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <LCD_SendCommand+0x3c2>
	else if (__tmp > 65535)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <LCD_SendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <LCD_SendCommand+0x3a4>
    1948:	89 e1       	ldi	r24, 0x19	; 25
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_SendCommand+0x392>
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <LCD_SendCommand+0x386>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <LCD_SendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_SendCommand+0x3ce>
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    1998:	e9 96       	adiw	r28, 0x39	; 57
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	e9 97       	sbiw	r28, 0x39	; 57
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	89 af       	std	Y+57, r24	; 0x39
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    /*  As I want to write data to DDRAM to display in LCD  */
    GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	8d ab       	std	Y+53, r24	; 0x35
    19de:	9e ab       	std	Y+54, r25	; 0x36
    19e0:	af ab       	std	Y+55, r26	; 0x37
    19e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	6d a9       	ldd	r22, Y+53	; 0x35
    19e6:	7e a9       	ldd	r23, Y+54	; 0x36
    19e8:	8f a9       	ldd	r24, Y+55	; 0x37
    19ea:	98 ad       	ldd	r25, Y+56	; 0x38
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	89 ab       	std	Y+49, r24	; 0x31
    19fe:	9a ab       	std	Y+50, r25	; 0x32
    1a00:	ab ab       	std	Y+51, r26	; 0x33
    1a02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a04:	69 a9       	ldd	r22, Y+49	; 0x31
    1a06:	7a a9       	ldd	r23, Y+50	; 0x32
    1a08:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <LCD_DisplayCharacter+0x7c>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	98 ab       	std	Y+48, r25	; 0x30
    1a22:	8f a7       	std	Y+47, r24	; 0x2f
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <LCD_DisplayCharacter+0xfa>
	else if (__tmp > 65535)
    1a26:	69 a9       	ldd	r22, Y+49	; 0x31
    1a28:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <LCD_DisplayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a40:	7e a9       	ldd	r23, Y+54	; 0x36
    1a42:	8f a9       	ldd	r24, Y+55	; 0x37
    1a44:	98 ad       	ldd	r25, Y+56	; 0x38
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	98 ab       	std	Y+48, r25	; 0x30
    1a64:	8f a7       	std	Y+47, r24	; 0x2f
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <LCD_DisplayCharacter+0xdc>
    1a68:	89 e1       	ldi	r24, 0x19	; 25
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9e a7       	std	Y+46, r25	; 0x2e
    1a6e:	8d a7       	std	Y+45, r24	; 0x2d
    1a70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_DisplayCharacter+0xca>
    1a78:	9e a7       	std	Y+46, r25	; 0x2e
    1a7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	98 ab       	std	Y+48, r25	; 0x30
    1a84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a88:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <LCD_DisplayCharacter+0xbe>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <LCD_DisplayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	69 a9       	ldd	r22, Y+49	; 0x31
    1a92:	7a a9       	ldd	r23, Y+50	; 0x32
    1a94:	8b a9       	ldd	r24, Y+51	; 0x33
    1a96:	9c a9       	ldd	r25, Y+52	; 0x34
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	98 ab       	std	Y+48, r25	; 0x30
    1aa2:	8f a7       	std	Y+47, r24	; 0x2f
    1aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa8:	9c a7       	std	Y+44, r25	; 0x2c
    1aaa:	8b a7       	std	Y+43, r24	; 0x2b
    1aac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_DisplayCharacter+0x106>
    1ab4:	9c a7       	std	Y+44, r25	; 0x2c
    1ab6:	8b a7       	std	Y+43, r24	; 0x2b

    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8f a3       	std	Y+39, r24	; 0x27
    1acc:	98 a7       	std	Y+40, r25	; 0x28
    1ace:	a9 a7       	std	Y+41, r26	; 0x29
    1ad0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a e7       	ldi	r20, 0x7A	; 122
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8b a3       	std	Y+35, r24	; 0x23
    1aec:	9c a3       	std	Y+36, r25	; 0x24
    1aee:	ad a3       	std	Y+37, r26	; 0x25
    1af0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af2:	6b a1       	ldd	r22, Y+35	; 0x23
    1af4:	7c a1       	ldd	r23, Y+36	; 0x24
    1af6:	8d a1       	ldd	r24, Y+37	; 0x25
    1af8:	9e a1       	ldd	r25, Y+38	; 0x26
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_DisplayCharacter+0x16a>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9a a3       	std	Y+34, r25	; 0x22
    1b10:	89 a3       	std	Y+33, r24	; 0x21
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_DisplayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_DisplayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b30:	89 a5       	ldd	r24, Y+41	; 0x29
    1b32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_DisplayCharacter+0x1ca>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	98 a3       	std	Y+32, r25	; 0x20
    1b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b60:	98 a1       	ldd	r25, Y+32	; 0x20
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_DisplayCharacter+0x1b8>
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9a a3       	std	Y+34, r25	; 0x22
    1b72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_DisplayCharacter+0x1ac>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_DisplayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	9e 8f       	std	Y+30, r25	; 0x1e
    1b98:	8d 8f       	std	Y+29, r24	; 0x1d
    1b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_DisplayCharacter+0x1f4>
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d

    _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    /*send data depend on wires 4 OR 8  */
    #if (LCD_BITS_MODE == LCD_8_BIT_MODE)
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	69 ad       	ldd	r22, Y+57	; 0x39
    1baa:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_WritePort>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	89 8f       	std	Y+25, r24	; 0x19
    1bb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bba:	ab 8f       	std	Y+27, r26	; 0x1b
    1bbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a e7       	ldi	r20, 0x7A	; 122
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8d 8b       	std	Y+21, r24	; 0x15
    1bd8:	9e 8b       	std	Y+22, r25	; 0x16
    1bda:	af 8b       	std	Y+23, r26	; 0x17
    1bdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <LCD_DisplayCharacter+0x256>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <LCD_DisplayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <LCD_DisplayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <LCD_DisplayCharacter+0x2b6>
    1c42:	89 e1       	ldi	r24, 0x19	; 25
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
    1c4a:	89 89       	ldd	r24, Y+17	; 0x11
    1c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_DisplayCharacter+0x2a4>
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <LCD_DisplayCharacter+0x298>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <LCD_DisplayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	98 89       	ldd	r25, Y+16	; 0x10
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_DisplayCharacter+0x2e0>
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
            GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
        }
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	66 e0       	ldi	r22, 0x06	; 6
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e8       	ldi	r26, 0x80	; 128
    1ca2:	bf e3       	ldi	r27, 0x3F	; 63
    1ca4:	8b 87       	std	Y+11, r24	; 0x0b
    1ca6:	9c 87       	std	Y+12, r25	; 0x0c
    1ca8:	ad 87       	std	Y+13, r26	; 0x0d
    1caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a e7       	ldi	r20, 0x7A	; 122
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	a9 87       	std	Y+9, r26	; 0x09
    1cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <LCD_DisplayCharacter+0x344>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <LCD_DisplayCharacter+0x3c2>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <LCD_DisplayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <LCD_DisplayCharacter+0x3a4>
    1d30:	89 e1       	ldi	r24, 0x19	; 25
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_DisplayCharacter+0x392>
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <LCD_DisplayCharacter+0x386>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <LCD_DisplayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_DisplayCharacter+0x3ce>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    1d80:	80 91 87 00 	lds	r24, 0x0087
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	80 93 87 00 	sts	0x0087, r24
    if(col_global == 16)
    1d8a:	80 91 87 00 	lds	r24, 0x0087
    1d8e:	80 31       	cpi	r24, 0x10	; 16
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <LCD_DisplayCharacter+0x3f2>
    {
        row_global = 1 ;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 93 86 00 	sts	0x0086, r24
        col_global = 0 ;
    1d98:	10 92 87 00 	sts	0x0087, r1
    }
}
    1d9c:	e9 96       	adiw	r28, 0x39	; 57
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <LCD_DisplayString+0x6>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    1dbe:	19 82       	std	Y+1, r1	; 0x01
    1dc0:	0e c0       	rjmp	.+28     	; 0x1dde <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	80 81       	ld	r24, Z
    1dd4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_DisplayCharacter>
        it++;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	88 23       	and	r24, r24
    1df2:	39 f7       	brne	.-50     	; 0x1dc2 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <LCD_MoveCursor+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <LCD_MoveCursor+0x8>
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3d 83       	std	Y+5, r19	; 0x05
    1e1a:	2c 83       	std	Y+4, r18	; 0x04
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	91 05       	cpc	r25, r1
    1e24:	e9 f0       	breq	.+58     	; 0x1e60 <LCD_MoveCursor+0x60>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <LCD_MoveCursor+0x3a>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <LCD_MoveCursor+0x50>
    1e38:	24 c0       	rjmp	.+72     	; 0x1e82 <LCD_MoveCursor+0x82>
    1e3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	c1 f0       	breq	.+48     	; 0x1e74 <LCD_MoveCursor+0x74>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	b9 f0       	breq	.+46     	; 0x1e7c <LCD_MoveCursor+0x7c>
    1e4e:	19 c0       	rjmp	.+50     	; 0x1e82 <LCD_MoveCursor+0x82>
    {
        case 0 : 
            New_Location = col ;
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	80 93 87 00 	sts	0x0087, r24
            row_global = 0 ;
    1e5a:	10 92 86 00 	sts	0x0086, r1
    1e5e:	11 c0       	rjmp	.+34     	; 0x1e82 <LCD_MoveCursor+0x82>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	80 5c       	subi	r24, 0xC0	; 192
    1e64:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	80 93 87 00 	sts	0x0087, r24
            row_global = 1 ;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	80 93 86 00 	sts	0x0086, r24
    1e72:	07 c0       	rjmp	.+14     	; 0x1e82 <LCD_MoveCursor+0x82>
            break;

        case 2 :
            New_Location = col + 0x10 ;
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	80 5f       	subi	r24, 0xF0	; 240
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <LCD_MoveCursor+0x82>
            break;

        case 3 : 
            New_Location = col + 0x50 ;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 5b       	subi	r24, 0xB0	; 176
    1e80:	89 83       	std	Y+1, r24	; 0x01
            break;
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	80 68       	ori	r24, 0x80	; 128
    1e86:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <LCD_DisplayStringRowCol+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <LCD_DisplayStringRowCol+0x8>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	6b 83       	std	Y+3, r22	; 0x03
    1eac:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	6c 81       	ldd	r22, Y+4	; 0x04
    1eb2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    1ed4:	10 92 87 00 	sts	0x0087, r1
    1ed8:	10 92 86 00 	sts	0x0086, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    
    if(col_global == 15 && row_global == 0 )
    1ef0:	80 91 87 00 	lds	r24, 0x0087
    1ef4:	8f 30       	cpi	r24, 0x0F	; 15
    1ef6:	89 f4       	brne	.+34     	; 0x1f1a <LCD_MoveCursorRight+0x32>
    1ef8:	80 91 86 00 	lds	r24, 0x0086
    1efc:	88 23       	and	r24, r24
    1efe:	69 f4       	brne	.+26     	; 0x1f1a <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    1f00:	10 92 87 00 	sts	0x0087, r1
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	80 93 86 00 	sts	0x0086, r24
        LCD_MoveCursor(row_global,col_global);
    1f0a:	80 91 86 00 	lds	r24, 0x0086
    1f0e:	90 91 87 00 	lds	r25, 0x0087
    1f12:	69 2f       	mov	r22, r25
    1f14:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    1f18:	1c c0       	rjmp	.+56     	; 0x1f52 <LCD_MoveCursorRight+0x6a>
    }
    else if (col_global == 15 && row_global == 1 )
    1f1a:	80 91 87 00 	lds	r24, 0x0087
    1f1e:	8f 30       	cpi	r24, 0x0F	; 15
    1f20:	81 f4       	brne	.+32     	; 0x1f42 <LCD_MoveCursorRight+0x5a>
    1f22:	80 91 86 00 	lds	r24, 0x0086
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	61 f4       	brne	.+24     	; 0x1f42 <LCD_MoveCursorRight+0x5a>
    {
        col_global = 0 , row_global = 0 ;
    1f2a:	10 92 87 00 	sts	0x0087, r1
    1f2e:	10 92 86 00 	sts	0x0086, r1
        LCD_MoveCursor(row_global,col_global);
    1f32:	80 91 86 00 	lds	r24, 0x0086
    1f36:	90 91 87 00 	lds	r25, 0x0087
    1f3a:	69 2f       	mov	r22, r25
    1f3c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <LCD_MoveCursorRight+0x6a>
    }
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    1f42:	84 e1       	ldi	r24, 0x14	; 20
    1f44:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
        col_global++;
    1f48:	80 91 87 00 	lds	r24, 0x0087
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	80 93 87 00 	sts	0x0087, r24
    }
}
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    if(col_global == 0 && row_global == 0)
    1f60:	80 91 87 00 	lds	r24, 0x0087
    1f64:	88 23       	and	r24, r24
    1f66:	91 f4       	brne	.+36     	; 0x1f8c <LCD_MoveCursorLeft+0x34>
    1f68:	80 91 86 00 	lds	r24, 0x0086
    1f6c:	88 23       	and	r24, r24
    1f6e:	71 f4       	brne	.+28     	; 0x1f8c <LCD_MoveCursorLeft+0x34>
    {
        col_global = 15 , row_global = 1 ;
    1f70:	8f e0       	ldi	r24, 0x0F	; 15
    1f72:	80 93 87 00 	sts	0x0087, r24
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	80 93 86 00 	sts	0x0086, r24
        LCD_MoveCursor(row_global,col_global);
    1f7c:	80 91 86 00 	lds	r24, 0x0086
    1f80:	90 91 87 00 	lds	r25, 0x0087
    1f84:	69 2f       	mov	r22, r25
    1f86:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    1f8a:	1d c0       	rjmp	.+58     	; 0x1fc6 <LCD_MoveCursorLeft+0x6e>
    }
    else if (col_global == 0 && row_global == 1)
    1f8c:	80 91 87 00 	lds	r24, 0x0087
    1f90:	88 23       	and	r24, r24
    1f92:	89 f4       	brne	.+34     	; 0x1fb6 <LCD_MoveCursorLeft+0x5e>
    1f94:	80 91 86 00 	lds	r24, 0x0086
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	69 f4       	brne	.+26     	; 0x1fb6 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = 15 , row_global = 0 ;
    1f9c:	8f e0       	ldi	r24, 0x0F	; 15
    1f9e:	80 93 87 00 	sts	0x0087, r24
    1fa2:	10 92 86 00 	sts	0x0086, r1
        LCD_MoveCursor(row_global,col_global);
    1fa6:	80 91 86 00 	lds	r24, 0x0086
    1faa:	90 91 87 00 	lds	r25, 0x0087
    1fae:	69 2f       	mov	r22, r25
    1fb0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    1fb4:	08 c0       	rjmp	.+16     	; 0x1fc6 <LCD_MoveCursorLeft+0x6e>
    }
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    1fb6:	80 e1       	ldi	r24, 0x10	; 16
    1fb8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
        col_global--;
    1fbc:	80 91 87 00 	lds	r24, 0x0087
    1fc0:	81 50       	subi	r24, 0x01	; 1
    1fc2:	80 93 87 00 	sts	0x0087, r24
    }
    
}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    1fd4:	8c e1       	ldi	r24, 0x1C	; 28
    1fd6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    1fe8:	88 e1       	ldi	r24, 0x18	; 24
    1fea:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <LCD_GenerateCharacterCGRAM+0x6>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <LCD_GenerateCharacterCGRAM+0x8>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9b 83       	std	Y+3, r25	; 0x03
    2002:	8a 83       	std	Y+2, r24	; 0x02
    2004:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	08 96       	adiw	r24, 0x08	; 8
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	0e c0       	rjmp	.+28     	; 0x203e <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	fc 01       	movw	r30, r24
    202e:	e2 0f       	add	r30, r18
    2030:	f3 1f       	adc	r31, r19
    2032:	80 81       	ld	r24, Z
    2034:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	88 30       	cpi	r24, 0x08	; 8
    2042:	78 f3       	brcs	.-34     	; 0x2022 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	0f 92       	push	r0
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_DisplayCharacter>
}
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <LCD_DisplayCustomCharacterRowCol+0x6>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	6a 83       	std	Y+2, r22	; 0x02
    207c:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	6b 81       	ldd	r22, Y+3	; 0x03
    2082:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_DisplayCharacter>
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	65 97       	sbiw	r28, 0x15	; 21
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	6a 8b       	std	Y+18, r22	; 0x12
    20ae:	7b 8b       	std	Y+19, r23	; 0x13
    20b0:	8c 8b       	std	Y+20, r24	; 0x14
    20b2:	9d 8b       	std	Y+21, r25	; 0x15
	 char string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    20b4:	8a 89       	ldd	r24, Y+18	; 0x12
    20b6:	9b 89       	ldd	r25, Y+19	; 0x13
    20b8:	9e 01       	movw	r18, r28
    20ba:	2f 5f       	subi	r18, 0xFF	; 255
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	b9 01       	movw	r22, r18
    20c0:	4a e0       	ldi	r20, 0x0A	; 10
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	0e 94 33 11 	call	0x2266	; 0x2266 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    20c8:	ce 01       	movw	r24, r28
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
}
    20d0:	65 96       	adiw	r28, 0x15	; 21
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <main>:


#include <util/delay.h>

int main (void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	2e 97       	sbiw	r28, 0x0e	; 14
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    20f6:	0e 94 be 0a 	call	0x157c	; 0x157c <LCD_init>
	LCD_DisplayStringRowCol("My LCD Driver",0,2);
    20fa:	80 e6       	ldi	r24, 0x60	; 96
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	42 e0       	ldi	r20, 0x02	; 2
    2102:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_DisplayStringRowCol>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e8       	ldi	r25, 0x80	; 128
    210a:	ab e3       	ldi	r26, 0x3B	; 59
    210c:	b5 e4       	ldi	r27, 0x45	; 69
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a e7       	ldi	r20, 0x7A	; 122
    2124:	53 e4       	ldi	r21, 0x43	; 67
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <main+0x76>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <main+0xf4>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <main+0xd6>
    219a:	89 e1       	ldi	r24, 0x19	; 25
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <main+0xc4>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <main+0xb8>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <main+0x100>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	LCD_DisplayStringRowCol("Embedded SW",1,2);
    21ea:	8e e6       	ldi	r24, 0x6E	; 110
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	42 e0       	ldi	r20, 0x02	; 2
    21f2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_DisplayStringRowCol>
    21f6:	ff cf       	rjmp	.-2      	; 0x21f6 <main+0x114>

000021f8 <__prologue_saves__>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	ca 1b       	sub	r28, r26
    2222:	db 0b       	sbc	r29, r27
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	09 94       	ijmp

00002230 <__epilogue_restores__>:
    2230:	2a 88       	ldd	r2, Y+18	; 0x12
    2232:	39 88       	ldd	r3, Y+17	; 0x11
    2234:	48 88       	ldd	r4, Y+16	; 0x10
    2236:	5f 84       	ldd	r5, Y+15	; 0x0f
    2238:	6e 84       	ldd	r6, Y+14	; 0x0e
    223a:	7d 84       	ldd	r7, Y+13	; 0x0d
    223c:	8c 84       	ldd	r8, Y+12	; 0x0c
    223e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2240:	aa 84       	ldd	r10, Y+10	; 0x0a
    2242:	b9 84       	ldd	r11, Y+9	; 0x09
    2244:	c8 84       	ldd	r12, Y+8	; 0x08
    2246:	df 80       	ldd	r13, Y+7	; 0x07
    2248:	ee 80       	ldd	r14, Y+6	; 0x06
    224a:	fd 80       	ldd	r15, Y+5	; 0x05
    224c:	0c 81       	ldd	r16, Y+4	; 0x04
    224e:	1b 81       	ldd	r17, Y+3	; 0x03
    2250:	aa 81       	ldd	r26, Y+2	; 0x02
    2252:	b9 81       	ldd	r27, Y+1	; 0x01
    2254:	ce 0f       	add	r28, r30
    2256:	d1 1d       	adc	r29, r1
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	ed 01       	movw	r28, r26
    2264:	08 95       	ret

00002266 <itoa>:
    2266:	fb 01       	movw	r30, r22
    2268:	9f 01       	movw	r18, r30
    226a:	e8 94       	clt
    226c:	42 30       	cpi	r20, 0x02	; 2
    226e:	c4 f0       	brlt	.+48     	; 0x22a0 <itoa+0x3a>
    2270:	45 32       	cpi	r20, 0x25	; 37
    2272:	b4 f4       	brge	.+44     	; 0x22a0 <itoa+0x3a>
    2274:	4a 30       	cpi	r20, 0x0A	; 10
    2276:	29 f4       	brne	.+10     	; 0x2282 <itoa+0x1c>
    2278:	97 fb       	bst	r25, 7
    227a:	1e f4       	brtc	.+6      	; 0x2282 <itoa+0x1c>
    227c:	90 95       	com	r25
    227e:	81 95       	neg	r24
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	64 2f       	mov	r22, r20
    2284:	77 27       	eor	r23, r23
    2286:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__udivmodhi4>
    228a:	80 5d       	subi	r24, 0xD0	; 208
    228c:	8a 33       	cpi	r24, 0x3A	; 58
    228e:	0c f0       	brlt	.+2      	; 0x2292 <itoa+0x2c>
    2290:	89 5d       	subi	r24, 0xD9	; 217
    2292:	81 93       	st	Z+, r24
    2294:	cb 01       	movw	r24, r22
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	a1 f7       	brne	.-24     	; 0x2282 <itoa+0x1c>
    229a:	16 f4       	brtc	.+4      	; 0x22a0 <itoa+0x3a>
    229c:	5d e2       	ldi	r21, 0x2D	; 45
    229e:	51 93       	st	Z+, r21
    22a0:	10 82       	st	Z, r1
    22a2:	c9 01       	movw	r24, r18
    22a4:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <strrev>

000022a8 <strrev>:
    22a8:	dc 01       	movw	r26, r24
    22aa:	fc 01       	movw	r30, r24
    22ac:	67 2f       	mov	r22, r23
    22ae:	71 91       	ld	r23, Z+
    22b0:	77 23       	and	r23, r23
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <strrev+0x4>
    22b4:	32 97       	sbiw	r30, 0x02	; 2
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <strrev+0x18>
    22b8:	7c 91       	ld	r23, X
    22ba:	6d 93       	st	X+, r22
    22bc:	70 83       	st	Z, r23
    22be:	62 91       	ld	r22, -Z
    22c0:	ae 17       	cp	r26, r30
    22c2:	bf 07       	cpc	r27, r31
    22c4:	c8 f3       	brcs	.-14     	; 0x22b8 <strrev+0x10>
    22c6:	08 95       	ret

000022c8 <__udivmodhi4>:
    22c8:	aa 1b       	sub	r26, r26
    22ca:	bb 1b       	sub	r27, r27
    22cc:	51 e1       	ldi	r21, 0x11	; 17
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <__udivmodhi4_ep>

000022d0 <__udivmodhi4_loop>:
    22d0:	aa 1f       	adc	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	a6 17       	cp	r26, r22
    22d6:	b7 07       	cpc	r27, r23
    22d8:	10 f0       	brcs	.+4      	; 0x22de <__udivmodhi4_ep>
    22da:	a6 1b       	sub	r26, r22
    22dc:	b7 0b       	sbc	r27, r23

000022de <__udivmodhi4_ep>:
    22de:	88 1f       	adc	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	5a 95       	dec	r21
    22e4:	a9 f7       	brne	.-22     	; 0x22d0 <__udivmodhi4_loop>
    22e6:	80 95       	com	r24
    22e8:	90 95       	com	r25
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	08 95       	ret

000022f0 <_exit>:
    22f0:	f8 94       	cli

000022f2 <__stop_program>:
    22f2:	ff cf       	rjmp	.-2      	; 0x22f2 <__stop_program>
